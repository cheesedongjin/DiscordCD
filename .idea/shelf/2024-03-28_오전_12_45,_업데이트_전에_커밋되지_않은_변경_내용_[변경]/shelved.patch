Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport random\r\nimport time\r\nimport requests\r\nimport hgtk\r\nimport discord\r\nfrom discord.ext import commands\r\nfrom bs4 import BeautifulSoup\r\n\r\n\r\ndef fword(text):\r\n    filepath = \"fword_list.txt\"\r\n    with open(filepath, 'r', encoding='UTF8') as f:\r\n        words = f.read().splitlines()\r\n    for word in words:\r\n        if word in text:\r\n            return True\r\n    return False\r\n\r\n\r\ndef parse_quotes():\r\n    url = 'https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=%EB%AA%85%EC%96%B8'\r\n    headers = {'User-Agent': 'Mozilla/5.0'}\r\n\r\n    response = requests.get(url, headers=headers)\r\n    soup = BeautifulSoup(response.text, 'html.parser')\r\n\r\n    quotes = [quote.text.strip() for quote in soup.find_all('p', class_='lngkr')]\r\n    authors = [author.text.strip() for author in soup.find_all('span', class_='engnm')]\r\n\r\n    return quotes, authors\r\n\r\n\r\ndef generate_number():\r\n    return random.sample(range(1, 10), 3)\r\n\r\n\r\ndef count_strikes_and_balls(secret_number, guess):\r\n    strikes = 0\r\n    balls = 0\r\n    for i in range(3):\r\n        if guess[i] == secret_number[i]:\r\n            strikes += 1\r\n        elif guess[i] in secret_number:\r\n            balls += 1\r\n    return strikes, balls\r\n\r\n\r\ndef validate_input(guess):\r\n    if not guess.isdigit() or len(guess) != 3:\r\n        return False\r\n    if len(set(guess)) != 3:\r\n        return False\r\n    return True\r\n\r\n\r\n# 봇의 설정\r\ntoken = 'MTE4OTAyNzMzNjYwODI4NDcxMg.G9r1Qa.mnHEXBMQDh0DbLHp9Qgo9rj2I9IxE7KlYnwia4'\r\nprefix = ''\r\n\r\n# 봇 객체 생성\r\nbot = commands.Bot(command_prefix=prefix, intents=discord.Intents.all())\r\nresponding = False\r\n\r\n# 키워드와 대답 사전\r\nkeyword_responses = {}\r\n\r\n# 이미 있는 단어 알기위해 단어목록 저장\r\nhistory = []\r\n# 키 발급은 https://krdict.korean.go.kr/openApi/openApiInfo\r\napikey = '480720C2EC23D1B81390E37674841507'\r\n\r\n# 좀 치사한 한방단어 방지 목록\r\nblacklist = ['즘', '틱', '늄', '슘', '퓸', '늬', '뺌', '섯', '숍', '튼', '름', '늠', '쁨']\r\n\r\n# 파일 경로\r\nfile_path = 'keyword_responses.json'\r\n\r\n\r\n# 지정한 두 개의 문자열 사이의 문자열을 리턴하는 함수\r\n# string list에서 단어, 품사와 같은 요소들을 추출할때 사용됩니다\r\ndef mid_return(val, s, e):\r\n    if s in val:\r\n        val = val[val.find(s) + len(s):]\r\n        if e in val:\r\n            val = val[:val.find(e)]\r\n    return val\r\n\r\n\r\n# 지정한 두 개의 문자열 사이의 문자열 여러개를 리턴하는 함수\r\n# string에서 XML 등의 요소를 분석할때 사용됩니다\r\ndef mid_return_all(val, s, e):\r\n    if s in val:\r\n        tmp = val.split(s)\r\n        val = []\r\n        for i in range(0, len(tmp)):\r\n            if e in tmp[i]:\r\n                val.append(tmp[i][:tmp[i].find(e)])\r\n    else:\r\n        val = []\r\n    return val\r\n\r\n\r\ndef findword(query):\r\n    url = 'https://krdict.korean.go.kr/api/search?key=' + apikey + '&part=word&pos=1&q=' + query\r\n    response = requests.get(url)\r\n    ans = []\r\n\r\n    # 단어 목록을 불러오기\r\n    words = mid_return_all(response.text, '<item>', '</item>')\r\n    for w in words:\r\n        # 이미 쓴 단어가 아닐때\r\n        if w not in history:\r\n            # 한글자가 아니고 품사가 명사일때\r\n            word = mid_return(w, '<word>', '</word>')\r\n            pos = mid_return(w, '<pos>', '</pos>')\r\n            if len(word) > 1 and pos == '명사' and word not in history and not word[len(word) - 1] in blacklist:\r\n                ans.append(w)\r\n    if len(ans) > 0:\r\n        return random.choice(ans)\r\n    else:\r\n        return ''\r\n\r\n\r\ndef checkexists(query):\r\n    url = 'https://krdict.korean.go.kr/api/search?key=' + apikey + '&part=word&sort=popular&num=100&pos=1&q=' + query\r\n    response = requests.get(url)\r\n    ans = ''\r\n\r\n    # 단어 목록을 불러오기\r\n    words = mid_return_all(response.text, '<item>', '</item>')\r\n    for w in words:\r\n        # 이미 쓴 단어가 아닐때\r\n        if not (w in history):\r\n            # 한글자가 아니고 품사가 명사일때\r\n            word = mid_return(w, '<word>', '</word>')\r\n            pos = mid_return(w, '<pos>', '</pos>')\r\n            if len(word) > 1 and pos == '명사' and word == query:\r\n                ans = w\r\n\r\n    if len(ans) > 0:\r\n        return ans\r\n    else:\r\n        return ''\r\n\r\n\r\n# 함수들 추가\r\ndef save_responses():\r\n    with open(file_path, 'w') as file:\r\n        json.dump(keyword_responses, file, ensure_ascii=False, indent=4)\r\n\r\n\r\ndef load_responses():\r\n    try:\r\n        with open(file_path, 'r') as file:\r\n            data = json.load(file)\r\n            keyword_responses.update(data)\r\n    except FileNotFoundError:\r\n        print(f\"No previous data found. Creating {file_path} file.\")\r\n        save_responses()  # Creates the file if it doesn't exist\r\n    except json.JSONDecodeError:\r\n        print(\"Error decoding JSON. Starting with an empty keyword_responses dictionary.\")\r\n\r\n\r\n# 봇이 준비되면 실행되는 이벤트 핸들러\r\n@bot.event\r\nasync def on_ready():\r\n    print(f'Logged in as {bot.user.name}')\r\n    load_responses()\r\n\r\n\r\n# 메시지 수신 이벤트 핸들러\r\n@bot.event\r\nasync def on_message(message):\r\n    global responding\r\n\r\n    if message.author.bot or \"고양시\" in message.content or responding:\r\n        return\r\n    elif fword(message.content):\r\n        await message.reply(\"비속어에는 고양이가 대답하지 않아요.\\n비속어가 아니라면 다른 말로 다시 시도해 주세요!\")\r\n        if not isinstance(message.channel, discord.DMChannel):\r\n            await message.delete()\r\n        return\r\n\r\n    if \"사랑\" in message.content or \"좋\" in message.content:\r\n        if \"고양\" in message.content:\r\n            await message.add_reaction('❤\uFE0F')\r\n\r\n    if message.author.name == \"_cheese_07\" and \"//\" in message.content:\r\n        keyword = message.content.split(\"//\")[:-1]\r\n        response = message.content.split(\"//\")[-1]\r\n        all_ = message.content.split(\"//\")\r\n        kss = \"고양\"\r\n        filtered_list = [item for item in all_ if item != \"\" and item != \" \"]\r\n        if len(filtered_list) >= 2:\r\n            for ks in keyword:\r\n                kss += \"//\" + ks\r\n            keyword_responses[kss] = response\r\n            await message.channel.send(f\"키워드 '{kss.replace('//', ', ')}'에 대한 대답이 '{response}'로 설정되었습니다.\")\r\n            save_responses()\r\n        else:\r\n            if filtered_list[0] == \"리스트\":\r\n                emb = ''\r\n                for idx, (key, value) in enumerate(keyword_responses.items(), start=1):\r\n                    emb += f\"{idx}. {key}: {value}\\n\"\r\n                embed = discord.Embed(description=emb)\r\n                await message.channel.send(embed=embed)\r\n            elif filtered_list[0] == \"삭제\":\r\n                emb = ''\r\n                for idx, (key, value) in enumerate(keyword_responses.items(), start=1):\r\n                    emb += f\"{idx}. {key}: {value}\\n\"\r\n                embed = discord.Embed(description=emb)\r\n                embed.set_footer(text=\"삭제할 번호(1부터 정수만)를 선택해 주세요.\")\r\n                await message.channel.send(embed=embed)\r\n                message_ = await bot.wait_for('message', check=lambda m: m.author == message.author)\r\n                idx = int(message_.content)\r\n                keyword_responses.pop(list(keyword_responses.keys())[idx - 1])\r\n                save_responses()\r\n                await message.author.send(\"아래는 수정된 리스트입니다.\")\r\n                emb = ''\r\n                for idx, (key, value) in enumerate(keyword_responses.items(), start=1):\r\n                    emb += f\"{idx}. {key}: {value}\\n\"\r\n                embed = discord.Embed(description=emb)\r\n                embed.set_footer(text=\"수정된 리스트\")\r\n                await message.channel.send(embed=embed)\r\n        return\r\n\r\n    if \"명언\" in message.content and \"고양\" in message.content:\r\n        quotes, authors = parse_quotes()\r\n        ind = random.randint(0, len(quotes) - 1)\r\n        await message.reply(embed=discord.Embed(description=quotes[ind]).set_footer(text=authors[ind]))\r\n        return\r\n\r\n    if \"야구\" in message.content and (\"게임\" in message.content or \"숫자\" in message.content)\\\r\n            and \"고양\" in message.content:\r\n        responding = True\r\n        secret_number = generate_number()\r\n        rep = await message.reply(embed=discord.Embed(description='').add_field(name=\"야구 게임을 시작합니다\", value=''))\r\n        rephis = rep.embeds[0].fields[0].name\r\n        attempts = 0\r\n        while True:\r\n            rep = await rep.edit(embed=discord.Embed(description=rephis).add_field(name=\".\\n3자리 숫자를 입력해주세요\", value=''))\r\n            rephis = rep.embeds[0].description + rep.embeds[0].fields[0].name\r\n            guess_ = await bot.wait_for('message', check=lambda m: m.author == message.author)\r\n            await rep.delete()\r\n            guess = guess_.content\r\n            rephis += \".\\nㄴ \" + guess\r\n            if not isinstance(guess_.channel, discord.DMChannel):\r\n                await guess_.delete()\r\n            if not validate_input(guess):\r\n                rep = await message.reply(embed=discord.Embed(description=rephis).add_field(\r\n                    name=\".\\n올바른 입력이 아닙니다. 다시 시도하세요\", value=''))\r\n                rephis = rep.embeds[0].description + rep.embeds[0].fields[0].name\r\n                continue\r\n            attempts += 1\r\n            guess = [int(x) for x in guess]\r\n            strikes, balls = count_strikes_and_balls(secret_number, guess)\r\n            rep = await message.reply(embed=discord.Embed(description=rephis).add_field(\r\n                name=f\".\\n{strikes} 스트라이크, {balls} 볼\", value=''))\r\n            rephis = rep.embeds[0].description + rep.embeds[0].fields[0].name\r\n            if strikes == 3:\r\n                await rep.edit(embed=discord.Embed(\r\n                    description=rephis).add_field(name=f\".\\n축하합니다! {attempts}번 만에 정답을 맞추셨습니다.\", value=''))\r\n                break\r\n        responding = False\r\n        return\r\n\r\n    if \"끝말\" in message.content and \"고양\" in message.content:\r\n        responding = True\r\n        playing = True\r\n        global history\r\n        rept = await message.reply(embed=discord.Embed(description='''\r\n=============고양이 끝말잇기===============\r\n사전 데이터 제공: 국립국어원 한국어기초사전\r\n끝말잇기 코드 원본: https://blog.naver.com/pdj2885/221552896123\r\n- - - 게임 방법 - - -\r\n가장 처음 단어를 제시하면 끝말잇기가 시작됩니다\r\n'/그만'을 입력하면 게임이 종료되며, '/다시'로\r\n게임을 다시 시작할 수 있습니다.\r\n- - - 게임 규칙 - - -\r\n1. 사전에 등재된 명사여야 합니다\r\n2. 적어도 단어의 길이가 두 글자 이상이어야 합니다\r\n3. 이미 사용한 단어를 다시 사용할 수 없습니다\r\n4. 두음법칙 적용 가능합니다 (ex. 리->니)\r\n- - - 주의 사항 - - -\r\n1. 고양이가 모르는 단어가 있을 수 있어요.\r\n   그럴 때는 다른 단어로 시도해 주세요:(\r\n2. 고양이가 부적절한 단어를 말할 수 있어요.\r\n==========================================\r\n''').add_field(name=\"먼저 시작하세요!\", value=''))\r\n        rephist = rept.embeds[0].fields[0].name\r\n\r\n        sword = ''\r\n        message_ = message\r\n        history = []\r\n        while playing:\r\n            query = ''\r\n            word_ok = False\r\n\r\n            while not word_ok:\r\n                message_ = await bot.wait_for('message', check=lambda message__: message__.author == message.author)\r\n                await rept.delete()\r\n                query = message_.content\r\n                if not isinstance(message_.channel, discord.DMChannel):\r\n                    await message_.delete()\r\n                rephist += \".\\nㄴ \" + query\r\n                rept = await message.reply(embed=discord.Embed(description=rephist))\r\n                word_ok = True\r\n\r\n                if query == '/그만':\r\n                    playing = False\r\n                    await rept.edit(embed=discord.Embed(description=rephist).add_field(name='.\\n고양이 승리!', value=''))\r\n                    break\r\n                elif query == '/다시':\r\n                    history = []\r\n                    rept = await rept.edit(embed=discord.Embed(\r\n                        description=rephist).add_field(name='.\\n고양이 승리!\\n게임을 다시 시작합니다.', value=''))\r\n                    rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n                    word_ok = False\r\n                else:\r\n                    if query == '':\r\n                        word_ok = False\r\n\r\n                        if len(history) == 0:\r\n                            rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                name='.\\n단어를 입력하여 끝말잇기를 시작합니다.', value=''))\r\n                        else:\r\n                            rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                name=f'.\\n{sword}(으)로 시작하는 단어를 입력해 주십시오.', value=''))\r\n                        rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n                    else:\r\n                        # 첫 글자의 초성 분석하여 두음법칙 적용 -> 규칙에 아직 완벽하게 맞지 않으므로 차후 수정 필요\r\n                        if not len(history) == 0 and not query[0] == sword and not query == '':\r\n                            sdis = hgtk.letter.decompose(sword)\r\n                            qdis = hgtk.letter.decompose(query[0])\r\n                            if sdis[0] == 'ㄹ' and qdis[0] == 'ㄴ':\r\n                                rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                    name='.\\n두음법칙 적용됨', value=''))\r\n                            elif (sdis[0] == 'ㄹ' or sdis[0] == 'ㄴ') and qdis[0] == 'ㅇ' and qdis[1] in (\r\n                                    'ㅣ', 'ㅑ', 'ㅕ', 'ㅛ', 'ㅠ', 'ㅒ', 'ㅖ'):\r\n                                rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                    name='.\\n두음법칙 적용됨', value=''))\r\n                            else:\r\n                                word_ok = False\r\n                                rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                    name=f'.\\n{sword}(으)로 시작하는 단어여야 합니다.', value=''))\r\n                            rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n\r\n                        if len(query) == 1:\r\n                            word_ok = False\r\n                            rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                name='.\\n적어도 두 글자가 되어야 합니다', value=''))\r\n                            rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n\r\n                        if query in history:\r\n                            word_ok = False\r\n                            rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                name='.\\n이미 입력한 단어입니다', value=''))\r\n                            rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n\r\n                        if query[len(query) - 1] in blacklist:\r\n                            rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                name='.\\n...', value=''))\r\n                            rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n\r\n                        if word_ok:\r\n                            # 단어의 유효성을 체크\r\n                            ans = checkexists(query)\r\n                            if ans == '':\r\n                                word_ok = False\r\n                                rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                                    name='.\\n유효한 단어를 입력해 주십시오', value=''))\r\n                                rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n\r\n            history.append(query)\r\n\r\n            if playing:\r\n                start = query[len(query) - 1]\r\n\r\n                ans = findword(start + '*')\r\n\r\n                if ans == '':\r\n                    # ㄹ -> ㄴ 검색\r\n                    sdis = hgtk.letter.decompose(start)\r\n                    if sdis[0] == 'ㄹ':\r\n                        newq = hgtk.letter.compose('ㄴ', sdis[1], sdis[2])\r\n                        rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                            name=f\".\\n{start} -> {newq}\", value=''))\r\n                        rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n                        start = newq\r\n                        ans = findword(newq + '*')\r\n\r\n                if ans == '':\r\n                    # (ㄹ->)ㄴ -> ㅇ 검색\r\n                    sdis = hgtk.letter.decompose(start)\r\n                    if sdis[0] == 'ㄴ' and sdis[1] in ('ㅣ', 'ㅑ', 'ㅕ', 'ㅛ', 'ㅠ', 'ㅒ', 'ㅖ'):\r\n                        newq = hgtk.letter.compose('ㅇ', sdis[1], sdis[2])\r\n                        rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                            name=f\".\\n{start} -> {newq}\", value=''))\r\n                        rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n                        ans = findword(newq + '*')\r\n\r\n                if ans == '':\r\n                    await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                        name=f\".\\n{message_.author.name}님의 승리!\", value=''))\r\n                    break\r\n                else:\r\n                    answord = mid_return(ans, '<word>', '</word>')  # 단어 불러오기\r\n                    ansdef = mid_return(ans, '<definition>', '</definition>')  # 품사 불러오기\r\n                    history.append(answord)\r\n\r\n                    rept = await rept.edit(embed=discord.Embed(description=rephist).add_field(\r\n                        name=f\".\\n{query}>{answord}\\n({ansdef})\\n\", value=''))\r\n                    rephist = rept.embeds[0].description + rept.embeds[0].fields[0].name\r\n                    sword = answord[len(answord) - 1]\r\n\r\n        responding = False\r\n        return\r\n\r\n    for j in range(10, 0, -1):\r\n        for res in keyword_responses:\r\n            try:\r\n                keyword = res.split(\"//\")\r\n                response = keyword_responses[res]\r\n                if len(keyword) >= j and response:\r\n                    bo = False\r\n                    for i in range(0, len(keyword)):\r\n                        if not keyword[i] in message.content:\r\n                            bo = True\r\n                            break\r\n                    if not bo:\r\n                        response = response.replace(\"username\", message.author.mention)\r\n                        sent = await message.reply(response)\r\n                        if len(sent.content) > 2000:\r\n                            time.sleep(1.5)\r\n                            await sent.edit(content=\"(삭제된 메시지입니다)\")\r\n                        return\r\n            except ValueError:\r\n                pass\r\n\r\n    if \"고양\" in message.content:\r\n        fail_response = [\r\n            \"잘 알아듣지 못했어요:(\",\r\n            \"부르셨나요? 무슨 말인지 모르겠어요ㅠㅠ\",\r\n            \"미안해요, 이해가 안 되네요ㅠㅠ\",\r\n            \"뭔가 잘못 알아들었나봐요:(\",\r\n            \"다시 말해주실 수 있나요? 이해가 안 돼요:(\",\r\n            \"죄송해요, 잘 모르겠어요ㅠㅠ\",\r\n            \"무슨 말씀이신지 이해하지 못했어요:(\",\r\n            \"제가 뭔가를 놓쳤나요? 이해가 안 가네요ㅠㅠ\"\r\n        ]\r\n        await message.channel.send(random.choice(fail_response))\r\n        return\r\n\r\n\r\n# 봇 시작\r\nbot.run(token)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 822b8e5d6451783fb44dfe326d7e605e189de781)
+++ b/main.py	(date 1711554293489)
@@ -186,7 +186,7 @@
         if "고양" in message.content:
             await message.add_reaction('❤️')
 
-    if message.author.name == "_cheese_07" and "//" in message.content:
+    if message.author.name == "_cheese_07" and "//" in message.content and "http" not in message.content:
         keyword = message.content.split("//")[:-1]
         response = message.content.split("//")[-1]
         all_ = message.content.split("//")
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1711553048655)
+++ b/.idea/modules.xml	(date 1711553048655)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/DiscordBotCD.iml" filepath="$PROJECT_DIR$/.idea/DiscordBotCD.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1711554293540)
+++ b/.idea/misc.xml	(date 1711554293540)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1711553048679)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1711553048679)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1711553048688)
+++ b/.idea/vcs.xml	(date 1711553048688)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1711553048697)
+++ b/.idea/.gitignore	(date 1711553048697)
@@ -0,0 +1,3 @@
+# 디폴트 무시된 파일
+/shelf/
+/workspace.xml
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1711553048706)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1711553048706)
@@ -0,0 +1,10 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="SpellCheckingInspection" enabled="false" level="TYPO" enabled_by_default="false">
+      <option name="processCode" value="true" />
+      <option name="processLiterals" value="true" />
+      <option name="processComments" value="true" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/DiscordBotCD.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/DiscordBotCD.iml b/.idea/DiscordBotCD.iml
new file mode 100644
--- /dev/null	(date 1711553048714)
+++ b/.idea/DiscordBotCD.iml	(date 1711553048714)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
